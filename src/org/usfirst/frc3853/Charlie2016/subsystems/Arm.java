// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3853.Charlie2016.subsystems;

import org.usfirst.frc3853.Charlie2016.RobotMap;
import org.usfirst.frc3853.Charlie2016.commands.*;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Arm extends Subsystem {

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController armMotor = RobotMap.armarmMotor;
    private final DigitalInput armHomeSwitch = RobotMap.armArmHomeSwitch;
    private final Encoder armEncoder = RobotMap.armarmEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  // Put methods for controlling this subsystem
  // here. Call these from Commands.

  public void initDefaultCommand() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // Set the default command for a subsystem here.
    // setDefaultCommand(new MySpecialCommand());
  }

  public void up(double speed) {
    // moves the arm up at the requested speed between 0 and 1

    // validate and clean the input
    speed = Math.abs(speed);
    if (speed < 0) {
      speed = 0;
    }
    if (speed > 1) {
      speed = 1;
    }

    // set the motor speed and direction
    if (!isStowed()){
      armMotor.set(-speed);
    }
    else{
      armMotor.set(0);
    }
  }

  public void down(double speed) {
    // moves the arm up at the requested speed between 0 and 1

    // validate and clean the input
    speed = Math.abs(speed);
    if (speed < 0) {
      speed = 0;
    }
    if (speed > 1) {
      speed = 1;
    }

    // set the motor speed and direction
    armMotor.set(speed);

  }

  public boolean isStowed() {
    // read the switch and return true if the arm it against it
    // note remove the ! for a normally closed switch
    return (!armHomeSwitch.get());
  }

  public void resetEncoder() {
    armEncoder.reset();
  }

  public double getEncoder() {
    return armEncoder.getDistance();
  }

  public void stop() {
    armMotor.set(0);

  }
}
