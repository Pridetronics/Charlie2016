// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3853.Charlie2016.commands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3853.Charlie2016.Robot;

/**
 *
 */
public class setArmPosition extends Command {

  private Boolean m_IsRunning; // true if the command is still running
  private static final double DEADBAND = 5;

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
  private int m_degreesOffStow;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
  public setArmPosition(int degreesOffStow) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    m_degreesOffStow = degreesOffStow;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    requires(Robot.arm);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
  }

  // Called just before this Command runs the first time
  protected void initialize() {
    // just in case isFinished is run between initialize and execute
    m_IsRunning = true;

  }

  // Called repeatedly when this Command is scheduled to run
  protected void execute() {
    // check to see if the arm is within the deadband from the desired position
    if (Math.abs(Robot.arm.getEncoder() - m_degreesOffStow) < DEADBAND) {
      // we are there so stop the arms and flag us done
      Robot.arm.stop();
      m_IsRunning = false;
      return;
    }
    // we are not close to the position so drive toward it
    if (Robot.arm.getEncoder() < m_degreesOffStow) {
      Robot.arm.down(.5);
    } else {
      Robot.arm.up(.5);
    }
    m_IsRunning = true;

  }

  // Make this return true when this Command no longer needs to run execute()
  protected boolean isFinished() {
    return !m_IsRunning;
  }

  // Called once after isFinished returns true
  protected void end() {
    Robot.arm.stop();
  }

  // Called when another command which requires one or more of the same
  // subsystems is scheduled to run
  protected void interrupted() {
    end();
  }
}
